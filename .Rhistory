runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
library(shiny); runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/MWE_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/MWE_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/MWE_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/MWE_app.R')
# get data that depends on the selected chamber
plot_data <- filter(congress_data, chamber == "Senate")
breaks <- seq(0, 110, 10)
colors <- c("#2D8CFF", "#BABACC", "#FF4242")
# order factor
plot_data$member <- factor(plot_data$member, levels = plot_data$member[order(plot_data$score)])
# tooltip
plot_data$tooltip <- str_c(
"<div class=plot-tooltip-score>", round(plot_data$score, 2), "</div>",
"<div class=plot-tooltip-member>", plot_data$last, "</div>",
"<div class=plot-tooltip-info>", "(", plot_data$party_short, "-", plot_data$district, ")", "</div>"
)
set.seed(12345)
# plot positions
plot <- ggplot(plot_data) +
geom_point_interactive(aes(x = score, y = as.numeric(member), color = party, tooltip = tooltip, data_id = member), position = position_jitter(width = 0.01, height = 0), alpha = 0.5, size = 3, na.rm = TRUE) +
scale_color_manual(name = NULL, values = colors) +
scale_x_continuous(breaks = seq(0, 1, 0.1)) +
scale_y_continuous(breaks = breaks, expand = expansion(0.05, 0)) +
my_titles(x = "CSM-M Score", y = "Member") +
my_theme() +
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major.y = element_blank()
)
plot
# plot positions
plot <- ggplot(plot_data) +
geom_point_interactive(aes(x = score, y = as.numeric(member), color = party, tooltip = tooltip, data_id = member), position = position_jitter(width = 0.01, height = 0), alpha = 0.5, size = 3, na.rm = TRUE) +
scale_color_manual(name = NULL, values = colors) +
scale_x_continuous(breaks = seq(0, 1, 0.1)) +
scale_y_continuous(breaks = breaks, expand = expansion(0.05, 0)) +
coord_fixed(ratio = 8/10) +
my_titles(x = "CSM-M Score", y = "Member") +
my_theme() +
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major.y = element_blank()
)
plot
8/10
# plot positions
plot <- ggplot(plot_data) +
geom_point_interactive(aes(x = score, y = as.numeric(member), color = party, tooltip = tooltip, data_id = member), position = position_jitter(width = 0.01, height = 0), alpha = 0.5, size = 3, na.rm = TRUE) +
scale_color_manual(name = NULL, values = colors) +
scale_x_continuous(breaks = seq(0, 1, 0.1)) +
scale_y_continuous(breaks = breaks, expand = expansion(0.05, 0)) +
coord_fixed(ratio = 1) +
my_titles(x = "CSM-M Score", y = "Member") +
my_theme() +
theme(
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.grid.major.y = element_blank()
)
plot
runApp('Dropbox/Data Science/Machine Learning Demo/MWE_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/MWE_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/MWE_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/MWE_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/MWE_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/MWE_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/MWE_app.R')
800/570
570/800
# get data
plot_data <- congress_data %>%
filter(chamber == "Senate" & !is.na(score)) %>%
group_by(state) %>%
arrange(last) %>%
summarize(
mean_score = round(mean(score, na.rm = TRUE), 2),
score_1 = round(score[1], 2),
score_2 = round(score[2], 2),
senator_1 = member[1],
senator_2 = member[2],
last_1 = last[1],
last_2 = last[2],
party_short_1 = party_short[1],
party_short_2 = party_short[2],
district_1 = district[1],
district_2 = district[2],
count = n()
)
# make fill variable
plot_data$score_fill <- cut(plot_data$mean_score, seq(0, 1, 0.1))
# format score
plot_data$mean_score <- str_pad(plot_data$mean_score, width = 4, side = "right", pad = "0")
plot_data$score_1 <- str_pad(plot_data$score_1, width = 4, side = "right", pad = "0")
plot_data$score_2 <- str_pad(plot_data$score_2, width = 4, side = "right", pad = "0")
# make tooltip
plot_data$tooltip <- str_c(
"<div class=plot-tooltip-score>", plot_data$mean_score, "</div>",
"<div class=plot-tooltip-member>", plot_data$state, "</div>",
"<div class=plot-tooltip-info>", "(Mean)", "</div>",
"<div style=\"height:15px;\"></div>",
"<div class=plot-tooltip-score>", plot_data$score_1, "</div>",
"<div class=plot-tooltip-member>", plot_data$last_1, "</div>",
"<div class=plot-tooltip-info>", "(", plot_data$party_short_1, "-", plot_data$district_1, ")", "</div>",
"<div style=\"height:15px;\"></div>",
"<div class=plot-tooltip-score>", plot_data$score_2, "</div>",
"<div class=plot-tooltip-member>", plot_data$last_2, "</div>",
"<div class=plot-tooltip-info>", "(", plot_data$party_short_2, "-", plot_data$district_2, ")", "</div>"
)
map <- make_US_map(plot_data, tooltip = "tooltip", fill = "score_fill")
map
# width <- 0
# height <- 0
build <- ggplot_build(map)$data
build
width <- 0
height <- 0
build <- ggplot_build(map)$data
for(i in 1:length(build)) {
width <- max(build[[i]]$xmax, width)
height <- max(build[[i]]$ymax, height)
}
dim <- c(width, height)
dim
7/10
ggplot_build(map)$data
ggplot_build(map)
make_interactive
runApp('Dropbox/Data Science/Machine Learning Demo/MWE_app.R')
570/800
600/800
550/800
560/800
runApp('Dropbox/Data Science/Machine Learning Demo/MWE_app.R')
8/10
800 * 0.8
runApp('Dropbox/Data Science/Machine Learning Demo/MWE_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/MWE_app.R')
560 / 0.8
560 / 0.7
runApp('Dropbox/Data Science/Machine Learning Demo/MWE_app.R')
560 / 0.7
height = 600
ratio = 0.7
height / ratio
insert_plot_container <- function(plot, height = 600, ratio = 0.7) {
# div(
#   class = "container",
#   div(
#     class = "plot-container",
#     plot
#   )
# )
width <- round(height / ratio)
div(
class = "plot-container",
style = str_c("height:", height, "px;width:", width, "px;"),
plot
)
}
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/MWE_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/MWE_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
selected_member
selected_member <- "Warren (D-MA"
selected_member <- "Warren (D-MA)"
# selected state
selected_state <- str_extract(selected_member, "-[A-Z]{2}")
selected_state <- str_extract(selected_state, "[A-Z]{2}")
# make plot data
plot_data <- filter(congress_data, state_short == selected_state)
plot_data <- na.omit(plot_data)
# calculate y value
plot_data$y <- 1:nrow(plot_data)
plot_data$y <- (plot_data$y - min(plot_data$y)) / (max(plot_data$y) - min(plot_data$y))
# make categories
plot_data$cut <- cut(plot_data$score, breaks = seq(0, 1, 0.1), labels = FALSE)
plot_data$cut[plot_data$member == selected_member] <- 98
used_colors <- unique(plot_data$cut)
used_colors <- used_colors[order(used_colors)]
used_colors <- used_colors[used_colors <= 10]
colors <- c(palette[used_colors], "#414155")
plot_data$cut <- as.factor(plot_data$cut)
View(plot_data)
# tooltip
plot_data$tooltip <- str_c(
"<div class=plot-tooltip-score>", round(plot_data$score, 2), "</div>",
"<div class=plot-tooltip-member>", plot_data$last, "</div>",
"<div class=plot-tooltip-info>", "(", plot_data$party_short, "-", plot_data$district, ")", "</div>"
)
plot <- ggplot(plot_data) +
geom_segment(aes(x = 0, xend = 1, y = 0.5, yend = 0.5), color = "#BABACC", size = 0.5) +
geom_point_interactive(aes(x = score, y = y, fill = cut, size = chamber, tooltip = tooltip, data_id = tooltip), pch = 21, stroke = 1) +
scale_fill_manual(values = colors, guide = FALSE) +
scale_size_manual(values = c(4, 8), guide = FALSE) +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(-0.5, NA)) +
theme_void()
plot
plot <- ggplot(plot_data) +
geom_segment(aes(x = 0, xend = 1, y = 0.5, yend = 0.5), color = "#BABACC", size = 0.25) +
geom_point_interactive(aes(x = score, y = y, fill = cut, size = chamber, tooltip = tooltip, data_id = tooltip), pch = 21, stroke = 1) +
scale_fill_manual(values = colors, guide = FALSE) +
scale_size_manual(values = c(4, 8), guide = FALSE) +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(-0.5, NA)) +
theme_void()
plot <- ggplot(plot_data) +
geom_segment(aes(x = 0, xend = 1, y = 0.5, yend = 0.5), color = "#BABACC", size = 0.25) +
geom_point_interactive(aes(x = score, y = y, fill = cut, size = chamber, tooltip = tooltip, data_id = tooltip), pch = 21, stroke = 1) +
scale_fill_manual(values = colors, guide = FALSE) +
scale_size_manual(values = c(4, 8), guide = FALSE) +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(-0.5, NA)) +
theme_void() + theme(panel.background = element_rect(fill = NA, color = "black", size = 0.25))
plot
plot <- ggplot(plot_data) +
geom_segment(aes(x = 0, xend = 1, y = 0.5, yend = 0.5), color = "#BABACC", size = 0.25) +
geom_point_interactive(aes(x = score, y = y, fill = cut, size = chamber, tooltip = tooltip, data_id = tooltip), pch = 21, stroke = 1) +
scale_fill_manual(values = colors, guide = FALSE) +
scale_size_manual(values = c(4, 8), guide = FALSE) +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(-0.5, NA))
plot
plot <- ggplot(plot_data) +
geom_segment(aes(x = 0, xend = 1, y = 0.5, yend = 0.5), color = "#BABACC", size = 0.25) +
geom_point_interactive(aes(x = score, y = y, fill = cut, size = chamber, tooltip = tooltip, data_id = tooltip), pch = 21, stroke = 1) +
scale_fill_manual(values = colors, guide = FALSE) +
scale_size_manual(values = c(4, 8), guide = FALSE) +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(-0, NA)) +
theme_void() + theme(panel.background = element_rect(fill = NA, color = "black", size = 0.25))
plot
2.5/10
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
tags$a(id = outputId, class = "btn btn-default shiny-download-link", href = "",
target = "_blank", download = NA, NULL, label)
tags$a(id = "outputId", class = "btn btn-default shiny-download-link", href = "",
target = "_blank", download = NA, NULL, label)
insert_download_button <- function(id, label) {
tags$a(id = "outputId", class = "btn btn-default shiny-download-link outlined-button", href = "", target = "_blank", download = NA, NULL, label)
}
insert_download_button("id", "DOWNLOAD")
downloadHandler
Sys.Date()
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
downloadButton("id", "label")
downloadButton("id", "label")
downloadButton("id", "label")
downloadButton
insert_download_button <- function(id, label) {
insert_container() %<%
tags$a(id = id, class = "btn btn-default shiny-download-link outlined-button", href = "", target = "_blank", download = NA, NULL, label)
}
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
get_member
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
url <- "ASfasf"
json_url <- str_c("https://api.twitter.com/1/statuses/oembed.json?url=", url, collapse = "")
json <- read_json(json_url)
json_url <- str_c("https://api.twitter.com/1/statuses/oembed.json?url=", url, collapse = "")
json <- try(read_json(json_url))
json <- try(read_json(json_url))
json <- try(read_json(json_url))
html <- read_html(json$html)
json <- try(read_json(json_url))
json
class(json)
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
scrape_tweet("https://twitter.com/SenWarrenasfd/status/1262458670425792514")
scrape_tweet("https://twitter.com/SenWarren/status/xxxx1262458670425792514")
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
library(shiny); runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
library(shiny); runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
component_list <- function(...) {
list(...)
}
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
library(shiny); runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
div(class = "row-right", ...)
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
insert_text_button <- function(id, label) {
insert_container() %<%
tags$button(id = id, type = "button", class = "btn btn-default action-button text-button", label)
}
insert_download_button <- function(id, label) {
insert_container() %<%
tags$a(id = id, class = "btn btn-default shiny-download-link outlined-button", href = "", target = "_blank", download = NA, NULL, label)
}
insert_link_button <- function(id, label, url) {
insert_container() %<%
tags$a(id = id, class = "btn btn-default shiny-download-link contained-button", href = url, label)
}
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
install.packages("ssh")
mydrop <- plumber::do_provision()
analogsea::droplets()
mydrop <- plumber::do_provision(droplet = analogsea::droplets()$testapi, unstable = FALSE, example = TRUE)
library(shiny); runApp('Documents/Congressional-social-media-app/CSM-app.R')
# source files
source("R-code/HTML-functions.R")
setwd("~/Documents/Congressional-social-media-app")
# source files
source("R-code/HTML-functions.R")
source("R-code/plot-theme.R")
source("R-code/app-functions.R")
source("R-code/US-maps.R")
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
# conver to D3 map
interactive_map <- girafe(
print(map), width_svg = width, height_svg = height,
options = list(
opts_hover(css = ""),
opts_selection(type = "none"),
opts_tooltip(css = tooltip_css, offx = 20, offy = 20, opacity = 1, delay_mouseover = 100, delay_mouseout = 100),
opts_toolbar(saveaspng = FALSE),
opts_sizing(rescale = TRUE, width = 1)
)
)
runApp('CSM-app.R')
insert_block <- function(background_color "white", ...) {
div(
class = "block-container",
style = str_c("background-color:", background_color, ";").
div(
class = "block-content",
...
)
)
}
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
insert_footer
insert_HTML_text("footer")
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
div(
class = "header-container",
div(
class = "header-content", ...)
)
div(
class = "header-container",
div(
class = "header-content", ...)
)
insert_app_header <- function(...) {
div(
class = "header-container",
div(
class = "header-content", ...)
)
}
insert_app_header
insert_app_header)s
insert_app_header(s)
insert_app_header("Sdf")
insert_branding <- function(...) {
div(
class = "branding-container",
div(
class = "branding-content",
...
)
)
}
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
palette <- palette(10)
runApp('CSM-app.R')
palette <- colorRampPalette(c(blue, "white", red))
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
View(generate_color_palette)
View(tweet_data)
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
source('~/Documents/Congressional-social-media-app/R-code/US-maps.R')
