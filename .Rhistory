runApp('Dropbox/Data Science/Machine Learning Demo/MWE_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/MWE_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/MWE_app.R')
800/570
570/800
# get data
plot_data <- congress_data %>%
filter(chamber == "Senate" & !is.na(score)) %>%
group_by(state) %>%
arrange(last) %>%
summarize(
mean_score = round(mean(score, na.rm = TRUE), 2),
score_1 = round(score[1], 2),
score_2 = round(score[2], 2),
senator_1 = member[1],
senator_2 = member[2],
last_1 = last[1],
last_2 = last[2],
party_short_1 = party_short[1],
party_short_2 = party_short[2],
district_1 = district[1],
district_2 = district[2],
count = n()
)
# make fill variable
plot_data$score_fill <- cut(plot_data$mean_score, seq(0, 1, 0.1))
# format score
plot_data$mean_score <- str_pad(plot_data$mean_score, width = 4, side = "right", pad = "0")
plot_data$score_1 <- str_pad(plot_data$score_1, width = 4, side = "right", pad = "0")
plot_data$score_2 <- str_pad(plot_data$score_2, width = 4, side = "right", pad = "0")
# make tooltip
plot_data$tooltip <- str_c(
"<div class=plot-tooltip-score>", plot_data$mean_score, "</div>",
"<div class=plot-tooltip-member>", plot_data$state, "</div>",
"<div class=plot-tooltip-info>", "(Mean)", "</div>",
"<div style=\"height:15px;\"></div>",
"<div class=plot-tooltip-score>", plot_data$score_1, "</div>",
"<div class=plot-tooltip-member>", plot_data$last_1, "</div>",
"<div class=plot-tooltip-info>", "(", plot_data$party_short_1, "-", plot_data$district_1, ")", "</div>",
"<div style=\"height:15px;\"></div>",
"<div class=plot-tooltip-score>", plot_data$score_2, "</div>",
"<div class=plot-tooltip-member>", plot_data$last_2, "</div>",
"<div class=plot-tooltip-info>", "(", plot_data$party_short_2, "-", plot_data$district_2, ")", "</div>"
)
map <- make_US_map(plot_data, tooltip = "tooltip", fill = "score_fill")
map
# width <- 0
# height <- 0
build <- ggplot_build(map)$data
build
width <- 0
height <- 0
build <- ggplot_build(map)$data
for(i in 1:length(build)) {
width <- max(build[[i]]$xmax, width)
height <- max(build[[i]]$ymax, height)
}
dim <- c(width, height)
dim
7/10
ggplot_build(map)$data
ggplot_build(map)
make_interactive
runApp('Dropbox/Data Science/Machine Learning Demo/MWE_app.R')
570/800
600/800
550/800
560/800
runApp('Dropbox/Data Science/Machine Learning Demo/MWE_app.R')
8/10
800 * 0.8
runApp('Dropbox/Data Science/Machine Learning Demo/MWE_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/MWE_app.R')
560 / 0.8
560 / 0.7
runApp('Dropbox/Data Science/Machine Learning Demo/MWE_app.R')
560 / 0.7
height = 600
ratio = 0.7
height / ratio
insert_plot_container <- function(plot, height = 600, ratio = 0.7) {
# div(
#   class = "container",
#   div(
#     class = "plot-container",
#     plot
#   )
# )
width <- round(height / ratio)
div(
class = "plot-container",
style = str_c("height:", height, "px;width:", width, "px;"),
plot
)
}
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/MWE_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/MWE_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
selected_member
selected_member <- "Warren (D-MA"
selected_member <- "Warren (D-MA)"
# selected state
selected_state <- str_extract(selected_member, "-[A-Z]{2}")
selected_state <- str_extract(selected_state, "[A-Z]{2}")
# make plot data
plot_data <- filter(congress_data, state_short == selected_state)
plot_data <- na.omit(plot_data)
# calculate y value
plot_data$y <- 1:nrow(plot_data)
plot_data$y <- (plot_data$y - min(plot_data$y)) / (max(plot_data$y) - min(plot_data$y))
# make categories
plot_data$cut <- cut(plot_data$score, breaks = seq(0, 1, 0.1), labels = FALSE)
plot_data$cut[plot_data$member == selected_member] <- 98
used_colors <- unique(plot_data$cut)
used_colors <- used_colors[order(used_colors)]
used_colors <- used_colors[used_colors <= 10]
colors <- c(palette[used_colors], "#414155")
plot_data$cut <- as.factor(plot_data$cut)
View(plot_data)
# tooltip
plot_data$tooltip <- str_c(
"<div class=plot-tooltip-score>", round(plot_data$score, 2), "</div>",
"<div class=plot-tooltip-member>", plot_data$last, "</div>",
"<div class=plot-tooltip-info>", "(", plot_data$party_short, "-", plot_data$district, ")", "</div>"
)
plot <- ggplot(plot_data) +
geom_segment(aes(x = 0, xend = 1, y = 0.5, yend = 0.5), color = "#BABACC", size = 0.5) +
geom_point_interactive(aes(x = score, y = y, fill = cut, size = chamber, tooltip = tooltip, data_id = tooltip), pch = 21, stroke = 1) +
scale_fill_manual(values = colors, guide = FALSE) +
scale_size_manual(values = c(4, 8), guide = FALSE) +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(-0.5, NA)) +
theme_void()
plot
plot <- ggplot(plot_data) +
geom_segment(aes(x = 0, xend = 1, y = 0.5, yend = 0.5), color = "#BABACC", size = 0.25) +
geom_point_interactive(aes(x = score, y = y, fill = cut, size = chamber, tooltip = tooltip, data_id = tooltip), pch = 21, stroke = 1) +
scale_fill_manual(values = colors, guide = FALSE) +
scale_size_manual(values = c(4, 8), guide = FALSE) +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(-0.5, NA)) +
theme_void()
plot <- ggplot(plot_data) +
geom_segment(aes(x = 0, xend = 1, y = 0.5, yend = 0.5), color = "#BABACC", size = 0.25) +
geom_point_interactive(aes(x = score, y = y, fill = cut, size = chamber, tooltip = tooltip, data_id = tooltip), pch = 21, stroke = 1) +
scale_fill_manual(values = colors, guide = FALSE) +
scale_size_manual(values = c(4, 8), guide = FALSE) +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(-0.5, NA)) +
theme_void() + theme(panel.background = element_rect(fill = NA, color = "black", size = 0.25))
plot
plot <- ggplot(plot_data) +
geom_segment(aes(x = 0, xend = 1, y = 0.5, yend = 0.5), color = "#BABACC", size = 0.25) +
geom_point_interactive(aes(x = score, y = y, fill = cut, size = chamber, tooltip = tooltip, data_id = tooltip), pch = 21, stroke = 1) +
scale_fill_manual(values = colors, guide = FALSE) +
scale_size_manual(values = c(4, 8), guide = FALSE) +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(-0.5, NA))
plot
plot <- ggplot(plot_data) +
geom_segment(aes(x = 0, xend = 1, y = 0.5, yend = 0.5), color = "#BABACC", size = 0.25) +
geom_point_interactive(aes(x = score, y = y, fill = cut, size = chamber, tooltip = tooltip, data_id = tooltip), pch = 21, stroke = 1) +
scale_fill_manual(values = colors, guide = FALSE) +
scale_size_manual(values = c(4, 8), guide = FALSE) +
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(-0, NA)) +
theme_void() + theme(panel.background = element_rect(fill = NA, color = "black", size = 0.25))
plot
2.5/10
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
tags$a(id = outputId, class = "btn btn-default shiny-download-link", href = "",
target = "_blank", download = NA, NULL, label)
tags$a(id = "outputId", class = "btn btn-default shiny-download-link", href = "",
target = "_blank", download = NA, NULL, label)
insert_download_button <- function(id, label) {
tags$a(id = "outputId", class = "btn btn-default shiny-download-link outlined-button", href = "", target = "_blank", download = NA, NULL, label)
}
insert_download_button("id", "DOWNLOAD")
downloadHandler
Sys.Date()
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
downloadButton("id", "label")
downloadButton("id", "label")
downloadButton("id", "label")
downloadButton
insert_download_button <- function(id, label) {
insert_container() %<%
tags$a(id = id, class = "btn btn-default shiny-download-link outlined-button", href = "", target = "_blank", download = NA, NULL, label)
}
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
get_member
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
url <- "ASfasf"
json_url <- str_c("https://api.twitter.com/1/statuses/oembed.json?url=", url, collapse = "")
json <- read_json(json_url)
json_url <- str_c("https://api.twitter.com/1/statuses/oembed.json?url=", url, collapse = "")
json <- try(read_json(json_url))
json <- try(read_json(json_url))
json <- try(read_json(json_url))
html <- read_html(json$html)
json <- try(read_json(json_url))
json
class(json)
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
scrape_tweet("https://twitter.com/SenWarrenasfd/status/1262458670425792514")
scrape_tweet("https://twitter.com/SenWarren/status/xxxx1262458670425792514")
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
library(shiny); runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
library(shiny); runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
component_list <- function(...) {
list(...)
}
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
library(shiny); runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
div(class = "row-right", ...)
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
insert_text_button <- function(id, label) {
insert_container() %<%
tags$button(id = id, type = "button", class = "btn btn-default action-button text-button", label)
}
insert_download_button <- function(id, label) {
insert_container() %<%
tags$a(id = id, class = "btn btn-default shiny-download-link outlined-button", href = "", target = "_blank", download = NA, NULL, label)
}
insert_link_button <- function(id, label, url) {
insert_container() %<%
tags$a(id = id, class = "btn btn-default shiny-download-link contained-button", href = url, label)
}
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
runApp('Dropbox/Data Science/Machine Learning Demo/tweet_app.R')
install.packages("ssh")
mydrop <- plumber::do_provision()
analogsea::droplets()
mydrop <- plumber::do_provision(droplet = analogsea::droplets()$testapi, unstable = FALSE, example = TRUE)
# libraries
library(stringr)
library(backpipe)
library(ggplot2)
library(plotly)
library(ggiraph)
library(shiny)
library(SnowballC)
library(tm)
library(rvest)
library(jsonlite)
library(httr)
library(keras)
library(extrafont)
library(rworldmap)
library(rworldxtra)
library(raster)
library(dplyr)
library(ggiraph)
library(sf)
library(rgdal)
library(maptools)
library(rgeos)
library(sf)
# read in data
tweet_data <- read.csv("data/tweet-data.csv", stringsAsFactors = FALSE)
setwd("~/Documents/CSM-app")
setwd("~/Documents/Congressional-social-media-app")
clean_tweet <- function(raw) {
raw <- str_squish(raw)
raw <- str_replace_all(raw, "[’]", "'")
raw <- str_replace_all(raw, "<.*?>", "")
raw <- str_replace_all(raw, "<.*?>", "&")
cleaned <- str_to_lower(raw)
cleaned <- str_replace(cleaned, "http.*", "")
cleaned <- str_replace_all(cleaned, "@[a-z0-9_]+", "")
cleaned <- str_replace(cleaned, "^rt", "")
cleaned <- str_replace_all(cleaned, "['’]", "")
cleaned <- str_replace_all(cleaned, "[^a-z ]+", " ")
cleaned <- str_squish(cleaned)
out <- list(raw = raw, cleaned = cleaned)
return(out)
}
# read in data
tweet_data <- read.csv("data/tweet-data.csv", stringsAsFactors = FALSE)
# read in congress data
congress_data <- read.csv("data/115th-congress.csv", stringsAsFactors = FALSE)
# read in HTML templates
HTML_text <- read_html("www/HTML/app-text.html")
# read in tweet examples
example_tweets <- read.csv("data/example-tweets.csv", stringsAsFactors = FALSE)
# month data
month_data <- tweet_data %>%
group_by(member, month) %>%
summarize(score = mean(score))
# read in congress data
congress_data <- read.csv("data/115th-congress.csv", stringsAsFactors = FALSE)
# read in congress data
congress_data <- read.csv("data/115th-congress.csv", stringsAsFactors = FALSE)
# month data
month_data <- tweet_data %>%
group_by(member, month) %>%
summarize(score = mean(score))
month_data$month <- as.numeric(as.factor(month_data$month))
month_data <- filter(month_data, month != 25)
# slope data
slope_data <- month_data %>%
group_by(member) %>%
summarize(slope =  coef(lm(score ~ month))[2])
slope_data$slope <- round(slope_data$slope, 3)
# score data
score_data <- tweet_data %>% group_by(member) %>%
summarize(score_MEAN = round(mean(score), 2),
score_SD = round(IQR(score, na.rm = TRUE), 2))
# clean congress data
congress_data <- left_join(congress_data, score_data, by = "member")
congress_data <- left_join(congress_data, slope_data, by = "member")
congress_data <- rename(congress_data, score = score_MEAN)
congress_data <- congress_data %>% mutate(congress_percentile = round(rank(score)/n(), 2) * 100, congress_percentile_SD = round(rank(score_SD)/n(), 2) * 100)
congress_data <- congress_data %>% group_by(chamber) %>% mutate(chamber_percentile = round(rank(score)/n(), 2) * 100, chamber_percentile_SD = round(rank(score_SD)/n(), 2) * 100)
congress_data <- congress_data %>% group_by(party) %>% mutate(party_percentile = round(rank(score)/n(), 2) * 100, party_percentile_SD = round(rank(score_SD)/n(), 2) * 100)
congress_data <- congress_data %>% group_by(state) %>% mutate(state_percentile = round(rank(score)/n(), 2) * 100, state_percentile_SD = round(rank(score_SD)/n(), 2) * 100)
congress_data$slope_percentile <- round(rank(abs(congress_data$slope))/nrow(congress_data), 2) * 100
# state-level data
state_data <- congress_data %>%
group_by(state) %>%
summarize(
score_all = mean(score, na.rm = TRUE),
score_house = mean(score[chamber == "House"], na.rm = TRUE),
score_senate = mean(score[chamber == "Senate"], na.rm = TRUE)
) %>%
ungroup()
state_data$score_house[is.nan(state_data$score_house)] <- NA
# district-level data
district_data <- congress_data %>%
filter(chamber == "House") %>%
group_by(district) %>%
summarize(score = mean(score, na.rm = TRUE)) %>%
ungroup()
district_data$score[is.nan(district_data$score)] <- NA
# cut state data
state_data$score_all_fill <- cut(state_data$score_all, breaks = seq(0, 1, 0.1))
state_data$score_house_fill <- cut(state_data$score_house, breaks = seq(0, 1, 0.1))
state_data$score_senate_fill <- cut(state_data$score_senate, breaks = seq(0, 1, 0.1))
# cut district data
district_data$score_fill <- cut(district_data$score, breaks = seq(0, 1, 0.1))
load_CNN <- function() {
tokenizer <- load_text_tokenizer("Trained Model/tokenizer")
model <- load_model_hdf5("Trained Model/model")
model_dropout <- load_model_hdf5("Trained Model/model_dropout")
out <- list(tokenizer = tokenizer, deterministic = model, stochastic = model_dropout)
return(out)
}
# load trained neural network
model <- load_CNN()
# function to loead model
load_CNN <- function() {
tokenizer <- load_text_tokenizer("trained-model/tokenizer")
model <- load_model_hdf5("trained-model/model")
model_dropout <- load_model_hdf5("trained-model/model-dropout")
out <- list(tokenizer = tokenizer, deterministic = model, stochastic = model_dropout)
return(out)
}
# load trained neural network
model <- load_CNN()
runApp('CSM-app.R')
# source files
source("R Code/HTML-functions.R")
# source files
source("R-dode/HTML-functions.R")
# source files
source("R-code/HTML-functions.R")
source("R-code/plot-theme.R")
source("R-code/app-functions.R")
source("R-code/US-maps.R")
source("R-code/US-maps.R")
# generate state map data
state_map_data <- generate_state_map_data("cb_2017_us_state_20m")
# generate district map data
district_map_data <- generate_district_map_data("cb_2017_us_cd115_20m")
# generate state map data
state_map_data <- generate_state_map_data("cb_2017_us_state_20m")
# generate district map data
district_map_data <- generate_district_map_data("cb_2017_us_cd115_20m")
generate_district_map_data
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
View(state_data)
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
selected_member <- "Warren (D-MA)"
selected_district <- congress_data$district[congress_data$member == selected_member]
selected_district
selected_member <- "Carter (R-TX31)"
# selected data
selected_member <- reactive$members_page_selected_member
selected_district <- congress_data$district[congress_data$member == selected_member]
selected_district
# make map
make_single_district_map(district_data, selected_district = selected_district, fill = "score_fill") %>% make_interactive(width = 8, height = 8)
selected_district
make_single_district_map(district_data, selected_district = selected_district, fill = "score_fill")
make_single_district_map(district_data, selected_district = selected_district, fill = "score_fill") %>% make_interactive(width = 8, height = 8)
selected_state <- congress_data$state[congress_data$member == selected_member]
make_state_map(state_data, selected_state = selected_state, fill = "score_all_fill") %>% make_interactive(width = 8, height = 8)
make_US_map(state_data, selected_state = selected_state, box = TRUE, shaded = FALSE, fill = "score_all_fill") %>% make_interactive(width = 8, height = 8)
make_state_map(state_data, selected_state = selected_state, fill = "score_all_fill") %>% make_interactive(width = 8, height = 8)
runApp('CSM-app.R')
make_state_map(state_data, selected_state = selected_state, fill = "score_all_fill")
make_single_district_map(district_data, selected_district = selected_district, fill = "score_fill")
make_interactive(width = 8, height = 8)
# make map
make_single_district_map(district_data, selected_district = selected_district, fill = "score_fill") %>% make_interactive(width = 8, height = 8)
map <- make_single_district_map(district_data, selected_district = selected_district, fill = "score_fill")
# tooltip CSS
tooltip_css <- "background-color:white;color:#414155;border:none;box-shadow: 0px 0px 20px rgba(0, 0, 0, .1);padding:8px 12px;border-radius:8px;"
# get dimensions
dim <- get_dimensions(map)
dim
map
get_dimensions
width <- 0
height <- 0
build <- ggplot_build(map)$data
for(i in 1:length(build)) {
width <- max(build[[i]]$xmax, width)
height <- max(build[[i]]$ymax, height)
}
dim <- c(width, height)
dim
map <- make_US_map(state_data, selected_state = selected_state, box = TRUE, shaded = FALSE, fill = "score_all_fill")
# get dimensions
dim <- get_dimensions(map)
dim
runApp('CSM-app.R')
make_district_map(state_data, selected_state = selected_state, fill = "score_all_fill")
selected_state <- congress_data$state[congress_data$member == selected_member]
selected_district <- congress_data$district[congress_data$member == selected_member]
make_district_map(state_data, selected_state = selected_district, fill = "score_all_fill")
make_district_map(state_data, selected_district = selected_district, fill = "score_all_fill")
make_district_map(state_data, selected_state = selected_state, selected_district = selected_district, fill = "score_all_fill")
make_district_map(state_data, selected_state = selected_state, fill = "score_all_fill")
make_district_map(district_data, selected_state = selected_state, selected_district = selected_district, box = TRUE, shaded = TRUE, fill = "score_fill")
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
# conver to D3 map
interactive_map <- girafe(
# print(map), width_svg = 10, height_svg = 10 / (width / height),
# print(map), width_svg = dim[1], height_svg = dim[2],
print(map), width_svg = width, height_svg = height,
options = list(
opts_hover(css = "fill:gray;transition:0.2s linear;"),
opts_selection(type = "none"),
opts_tooltip(css = tooltip_css, offx = 20, offy = 20, opacity = 1, delay_mouseover = 100, delay_mouseout = 100),
opts_toolbar(saveaspng = FALSE),
opts_sizing(rescale = TRUE, width = 1)
)
)
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
# error message for selected district
if(!is.null(selected_district)) {
if(!(selected_district %in% district_map_data$district)) {
stop("district string is not valid")
}
}
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
runApp('CSM-app.R')
